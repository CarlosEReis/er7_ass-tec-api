package br.com.carloser7.asstecnica.domain.service;import br.com.carloser7.asstecnica.domain.exception.ChamadoTecnicoNaoEncontradoException;import br.com.carloser7.asstecnica.domain.model.ChamadoTecnico;import br.com.carloser7.asstecnica.domain.model.Contato;import br.com.carloser7.asstecnica.domain.model.Usuario;import br.com.carloser7.asstecnica.domain.repository.ChamadoTecnicoRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;@Servicepublic class CadastroChamadoTecnicoService {    @Autowired private ChamadoTecnicoRepository chamadoRepository;    @Autowired private CadastroClienteService clienteService;    @Autowired private CadastroContatoService contatoService;    @Autowired private CadastroProdutoService produtoService;    public ChamadoTecnico buscar(Integer chamadoId) {        return this.chamadoRepository            .findById(chamadoId)            .orElseThrow(                () -> new ChamadoTecnicoNaoEncontradoException(chamadoId));    }    @Transactional    public ChamadoTecnico criar(ChamadoTecnico chamado) {        validaChamado(chamado);        chamado.enviarParaFila(getUsuarioAtual());        return this.chamadoRepository.save(chamado);    }    private void validaChamado(ChamadoTecnico chamado) {        var cliente = clienteService.buscar(chamado.getCliente().getId());        chamado.setCliente(cliente);        validaItens(chamado);        validaContatos(chamado);    }    private void validaItens(ChamadoTecnico chamado) {        chamado.getItens().forEach(item -> {            var produto = produtoService.buscaPorIDOuFalha(item.getProduto().getId());            item.setProduto(produto);            item.setChamadoTecnico(chamado);            item.pendente(getUsuarioAtual());        });    }    private void validaContatos(ChamadoTecnico chamado) {        var contatos = new ArrayList<Contato>();        chamado.getContatos().forEach(c -> {            var contato = contatoService.buscar(c.getId());            contatos.add(contato);        });        chamado.setContatos(contatos);    }    private String getUsuarioAtual() {        Usuario usuario = (Usuario) SecurityContextHolder.getContext().getAuthentication().getDetails();        return  usuario.getNome();    }}